"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class timestamped_vector_double(object):
    __slots__ = ["ts", "len", "values"]

    IS_LITTLE_ENDIAN = False;
    def __init__(self):
        self.ts = 0
        self.len = 0
        self.values = []

    def encode(self):
        buf = BytesIO()
        buf.write(timestamped_vector_double._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qi", self.ts, self.len))
        buf.write(struct.pack('>%dd' % self.len, *self.values[:self.len]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != timestamped_vector_double._get_packed_fingerprint():
            raise ValueError("Decode error")
        return timestamped_vector_double._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = timestamped_vector_double()
        self.ts, self.len = struct.unpack(">qi", buf.read(12))
        self.values = struct.unpack('>%dd' % self.len, buf.read(self.len * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if timestamped_vector_double in parents: return 0
        tmphash = (0xf58982bf649f0da0) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if timestamped_vector_double._packed_fingerprint is None:
            timestamped_vector_double._packed_fingerprint = struct.pack(">Q", timestamped_vector_double._get_hash_recursive([]))
        return timestamped_vector_double._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

